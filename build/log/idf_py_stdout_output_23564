[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.2\examples\get-started\myproject\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 C:/Espressif/frameworks/esp-idf-v5.2/examples/get-started/myproject/build/bootloader/bootloader.bin"
Bootloader binary size 0x5240 bytes. 0x2dc0 bytes (36%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/atp.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable atp.elf
[6/8] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated C:/Espressif/frameworks/esp-idf-v5.2/examples/get-started/myproject/build/atp.bin
[7/8] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.2\examples\get-started\myproject\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Espressif/frameworks/esp-idf-v5.2/examples/get-started/myproject/build/partition_table/partition-table.bin C:/Espressif/frameworks/esp-idf-v5.2/examples/get-started/myproject/build/atp.bin"
atp.bin binary size 0x37820 bytes. Smallest app partition is 0x100000 bytes. 0xc87e0 bytes (78%) free.
[7/8] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.2\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.2 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.2/components/esptool_py/esptool/esptool.py;--chip;esp32s3 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Espressif/frameworks/esp-idf-v5.2esptool.py --chip esp32s3 -p COM10 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 atp.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM10
Connecting....
Chip is ESP32-S3 (QFN56) (revision v0.1)
Features: WiFi, BLE, Embedded PSRAM 8MB (AP_1v8)
Crystal is 40MHz
MAC: 68:b6:b3:3d:6c:20
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00010000 to 0x00047fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 21056 bytes to 13072...
Writing at 0x00000000... (100 %)
Wrote 21056 bytes (13072 compressed) at 0x00000000 in 0.6 seconds (effective 290.1 kbit/s)...
Hash of data verified.
Compressed 227360 bytes to 115043...
Writing at 0x00010000... (12 %)
Writing at 0x0001dc92... (25 %)
Writing at 0x00025528... (37 %)
Writing at 0x0002bb38... (50 %)
Writing at 0x00033011... (62 %)
Writing at 0x0003aabe... (75 %)
Writing at 0x00040970... (87 %)
Writing at 0x00047663... (100 %)
Wrote 227360 bytes (115043 compressed) at 0x00010000 in 3.3 seconds (effective 547.0 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 473.9 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
/examples/get-started/myproject/build -P C:/Espressif/frameworks/esp-idf-v5.2/components/esptool_py/run_serial_tool.cmake"
